
/**
 * Fluid Player
 * Copyright (c) 2021-present Fluid Player Team and Contributors
 * https://fluidplayer.com/
 *
 * Released under the MIT license
 */
(function(){
"use strict";var FP_HOMEPAGE="https://fluidplayer.com";var FP_BUILD_VERSION="v3";var FP_ENV="production";var FP_DEBUG=false;

// Create blocker overlay function
function createDevToolsBlocker() {
  var blocker = document.createElement('div');
  blocker.id = 'dev-tools-blocker';
  blocker.style.position = 'fixed';
  blocker.style.top = '0';
  blocker.style.left = '0';
  blocker.style.width = '100%';
  blocker.style.height = '100%';
  blocker.style.backgroundColor = 'black';
  blocker.style.color = 'white';
  blocker.style.textAlign = 'center';
  blocker.style.paddingTop = '20%';
  blocker.style.zIndex = '9999999';
  blocker.style.fontSize = '24px';
  blocker.innerHTML = 'Developer Tools detected. Please close them to continue.';
  document.body.appendChild(blocker);
  
  // Disable scrolling
  document.body.style.overflow = 'hidden';
  
  // Force reload after 3 seconds
  setTimeout(function() {
    window.location.reload();
  }, 3000);
}

// Global variable to track if we've detected DevTools
var devToolsDetected = false;

// Advanced DevTools Detection
var devtools = {
  isOpen: false,
  orientation: undefined
};

// Multiple detection methods combined
function detectDevTools() {
  // 1. Width/height threshold detection
  var widthThreshold = window.outerWidth - window.innerWidth > 160;
  var heightThreshold = window.outerHeight - window.innerHeight > 160;
  
  // 2. Debug object detection
  var isDebuggerOpen = false;
  try {
    var element = new Image();
    Object.defineProperty(element, 'id', {
      get: function() { isDebuggerOpen = true; return ''; }
    });
    console.log(element);
  } catch(e) {}
  
  // 3. devtools property detection
  var isDevtoolsOpen = false;
  try {
    isDevtoolsOpen = window.devtools && window.devtools.open;
  } catch(e) {}
  
  // 4. Console timing detection
  var startTime = performance.now();
  console.log();
  console.clear();
  var endTime = performance.now();
  var timingThreshold = (endTime - startTime) > 100;
  
  // Combine all detection methods
  if ((widthThreshold || heightThreshold || isDebuggerOpen || isDevtoolsOpen || timingThreshold) && !devToolsDetected) {
    devToolsDetected = true;
    createDevToolsBlocker();
    return true;
  }
  
  return false;
}

// Run detection frequently
setInterval(detectDevTools, 500);

// Add multiple event listeners to catch different approaches
window.addEventListener('keydown', function(e) {
  if (e.ctrlKey && e.shiftKey && (e.key === 'I' || e.key === 'i' || e.key === 'J' || e.key === 'j' || e.keyCode === 73 || e.keyCode === 74)) {
    e.preventDefault();
    e.stopPropagation();
    return false;
  }
  if (e.key === 'F12' || e.keyCode === 123) {
    e.preventDefault();
    e.stopPropagation();
    return false;
  }
  if (e.ctrlKey && (e.key === 'u' || e.keyCode === 85)) {
    e.preventDefault();
    e.stopPropagation();
    return false;
  }
}, true);

// Context menu prevention
document.addEventListener('contextmenu', function(e) {
  e.preventDefault();
  return false;
}, true);

// Detect browser features for developer tools
(function() {
  function isBrowserDevToolsOpen() {
    var threshold = 160;
    var widthThreshold = window.outerWidth - window.innerWidth > threshold;
    var heightThreshold = window.outerHeight - window.innerHeight > threshold;
    if (widthThreshold || heightThreshold) return true;
    
    var keys = [];
    var devtoolsCheck = /./;
    devtoolsCheck.toString = function() {
      if (keys.indexOf('f12') === -1) keys.push('f12');
      return '';
    };
    console.log('%c', devtoolsCheck);
    if (keys.indexOf('f12') !== -1) return true;
    
    return false;
  }
  
  setInterval(function() {
    if (isBrowserDevToolsOpen() && !devToolsDetected) {
      devToolsDetected = true;
      createDevToolsBlocker();
    }
  }, 1000);
})();

function fluidPlayerClass(){var self=this;self.version="3.0.0";self.homepage="https://fluidplayer.com";self.instances=[];self.destroyed=false;self.initialisePlayer=function(playerRootElement,options){if(playerRootElement==null){err("(Fluid Player) Error: A valid DOM Element ID or reference must be passed.");return false;}if(self.instances.some(function(instance){return instance.element===playerRootElement;})){err("(Fluid Player) Error: This element is already registered with Fluid Player.");return false;}var instanceOptions=options;var playerWrapper=self.preparePlayer(playerRootElement,instanceOptions);var playerInstance=self.initPlayer(playerWrapper,instanceOptions);self.instances.push(playerInstance);return playerInstance;};self.preparePlayer=function(playerRootElement,options){var playerElement=null;if(typeof playerRootElement==="string"){playerElement=document.getElementById(playerRootElement);}else{playerElement=playerRootElement;}if(!playerElement||playerElement.tagName!=="VIDEO"){err("(Fluid Player) Error: A valid HTMLVideoElement ID or reference must be passed.");return;}var playerWrapper=null;if(playerElement.parentNode&&playerElement.parentNode.classList&&playerElement.parentNode.classList.contains("fluid_video_wrapper")){playerWrapper=playerElement.parentNode;}else{playerWrapper=document.createElement("div");playerElement.parentNode.insertBefore(playerWrapper,playerElement);playerWrapper.appendChild(playerElement);playerWrapper.className+="fluid_video_wrapper";}playerWrapper.className+=options&&options.layoutControls&&options.layoutControls.layout?" fluid_player_layout_"+options.layoutControls.layout:" fluid_player_layout_default";return playerWrapper;};self.initPlayer=function(playerWrapper,options){var videoPlayerObj=self.createFluidPlayerObj(playerWrapper,options);videoPlayerObj.init();return videoPlayerObj;};self.createFluidPlayerObj=function(domNode,options){var videoPlayer=document.querySelector(domNode+">video");if(videoPlayer==null){err("(Fluid Player) Error: Could not find video element within wrapper.");return;}function overrideDefaults(obj1,obj2){const obj3={};for(let attrname in obj1){obj3[attrname]=obj1[attrname];}for(let attrname in obj2){obj3[attrname]=obj2[attrname];}return obj3;}const playerInstance={version:self.version,homepage:self.homepage,element:videoPlayer,domRef:{player:videoPlayer,wrapper:domNode},originalSrc:videoPlayer.src?videoPlayer.src:null,originalSrcTypes:[],isCurrentlyPlayingAd:false,displayOptions:{layoutControls:{primaryColor:false,posterImage:false,posterImageSize:"contain",autoPlay:false,mute:false,loop:false,playButtonShowing:true,playPauseAnimation:true,fillToContainer:false,keyboardControl:true,controlBar:{autoHide:true,autoHideTimeout:3,animated:true,},logo:{imageUrl:null,position:"top left",clickUrl:null,opacity:1,mouseOverImageUrl:null,imageMargin:"2px",hideWithControls:false,showOverAds:false},miniPlayer:{enabled:false,width:400,widthMobile:280,placeholderText:"Playing in Minimized Mode",position:"bottom right",}}},playbackSpeed:1.0,dashPlayer:null,hlsPlayer:null,bufferingData:{seg:0,lastPos:0,timer:0}};videoPlayer.setAttribute('playsinline','true');videoPlayer.setAttribute('webkit-playsinline','true');playerInstance.play=function(){playerInstance.domRef.player.play();};playerInstance.pause=function(){playerInstance.domRef.player.pause();};playerInstance.skipTo=function(timeInSeconds){playerInstance.domRef.player.currentTime=timeInSeconds;};playerInstance.setPlaybackSpeed=function(speed){playerInstance.domRef.player.playbackRate=Number(speed);playerInstance.playbackSpeed=Number(speed);};playerInstance.setVolume=function(volume){playerInstance.domRef.player.volume=volume;};playerInstance.toggleFullScreen=function(shouldToggle){if(shouldToggle===undefined){shouldToggle=!document.fullscreen&&!document.webkitIsFullScreen;}if(shouldToggle){if(playerInstance.domRef.wrapper.requestFullscreen){playerInstance.domRef.wrapper.requestFullscreen();}else if(playerInstance.domRef.wrapper.webkitRequestFullscreen){playerInstance.domRef.wrapper.webkitRequestFullscreen();}}else{if(document.exitFullscreen){document.exitFullscreen();}else if(document.webkitExitFullscreen){document.webkitExitFullscreen();}}};playerInstance.on=function(eventName,callback){if(typeof eventName!=='string'||typeof callback!=='function'){return;}const supportedEvents=['play','playing','pause','ended','seeked','timeupdate'];if(supportedEvents.includes(eventName)){playerInstance.domRef.player.addEventListener(eventName,function(e){callback({type:eventName,target:playerInstance.domRef.player});});return true;}return false;};return playerInstance;};};let fluidPlayerInitializer=function(target,options){if(!target||!options){err("Fluid Player: Missing required parameters for player initialization");}const fluidPlayer=new fluidPlayerClass();const playerInstance=fluidPlayer.initialisePlayer(target,options);return playerInstance;};if(window){if(!window.fluidPlayer){window.fluidPlayer=fluidPlayerInitializer;}}})();
